import java.util.*;
import java.io.*;

import static java.lang.Math.*;

public class Solution {
	static int querySegTree(int[] segTree, int low, int high, int pos, int l, int r) {
		if(l > high || r < low) 
			return Integer.MIN_VALUE;

		if(low >= l && high <= r)
			return segTree[pos];

		int mid = (low + high) >> 1;
		int val1 = querySegTree(segTree, low, mid, 2 * pos + 1, l, r);
		int val2 = querySegTree(segTree, mid + 1, high, 2 * pos + 2, l, r);
		return max(val1, val2);
	}
	static void updateSegTree(int[] segTree, int low, int high, int pos, int ind, int val) {
		if(ind > high || ind < low)
			return;

		if(low == high) {
			segTree[pos] = max(segTree[pos], val);
			return;
		}

		int mid = (low + high) >> 1;
		updateSegTree(segTree, low, mid, 2 * pos + 1, ind, val);
		updateSegTree(segTree, mid + 1, high, 2 * pos + 2, ind, val);
		segTree[pos] = max(segTree[2 * pos + 1], segTree[2 * pos + 2]);
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		PrintWriter w = new PrintWriter(System.out);

		int t = sc.nextInt();

		for(int x = 1; x <= t; ++x) {
			int r = sc.nextInt();
			int c = sc.nextInt();

			char mat[][] = new char[r][];
			for(int i = 0; i < r; ++i)
				mat[i] = sc.next().toCharArray();

			int start = 0, end = 1000, ans = 1000;
			while(start <= end) {	
				int mid = (start + end) >> 1;

				int segTree[][] = new int[4][4 * c];
				for(int i = 0; i < 4; ++i)
					Arrays.fill(segTree[i], Integer.MIN_VALUE);

				int vis[][] = new int[r][c];

				for(int i = 0; i < r; ++i) {
					for(int j = 0; j < c; ++j) {
						if(mat[i][j] == '1') {
							updateSegTree(segTree[0], 0, c - 1, 0, j, i + j);
							updateSegTree(segTree[1], 0, c - 1, 0, j, i - j);
						}
						int q1 = querySegTree(segTree[0], 0, c - 1, 0, 0, j);
						if(q1 != Integer.MIN_VALUE) {
							int cost = (i + j) - q1;
							if(cost <= mid)
								vis[i][j] = 1;
						}
						int q2 = querySegTree(segTree[1], 0, c - 1, 0, j, c - 1);
						if(q2 != Integer.MIN_VALUE) {
							int cost = (i - j) - q2;
							if(cost <= mid)
								vis[i][j] = 1;
						}
					}
				}

				for(int i = r - 1; i >= 0; --i) {
					for(int j = c - 1; j >= 0; --j) {
						if(mat[i][j] == '1') {
							updateSegTree(segTree[2], 0, c - 1, 0, j, (j - i));
							updateSegTree(segTree[3], 0, c - 1, 0, j, (-i - j));
						}
						int q1 = querySegTree(segTree[2], 0, c - 1, 0, 0, j);
						if(q1 != Integer.MIN_VALUE) {
							int cost = (j - i) - q1;
							if(cost <= mid)
								vis[i][j] = 1;
						}
						int q2 = querySegTree(segTree[3], 0, c - 1, 0, j, c - 1);
						if(q2 != Integer.MIN_VALUE) {
							int cost = (-i - j) - q2;
							if(cost <= mid)
								vis[i][j] = 1;
						}
					}
				}

				for(int i = 0; i < 4; ++i)
					Arrays.fill(segTree[i], Integer.MIN_VALUE);

				int maxCost[][] = new int[r][c];

				for(int i = 0; i < r; ++i) {
					for(int j = 0; j < c; ++j) {
						if(vis[i][j] == 0) {
							updateSegTree(segTree[0], 0, c - 1, 0, j, -(i + j));
							updateSegTree(segTree[1], 0, c - 1, 0, j, -(i - j));
						}
						int q1 = querySegTree(segTree[0], 0, c - 1, 0, 0, j);
						if(q1 != Integer.MIN_VALUE) {
							int cost = (i + j) + q1;
							maxCost[i][j] = max(maxCost[i][j], cost);
						}
						int q2 = querySegTree(segTree[1], 0, c - 1, 0, j, c - 1);
						if(q2 != Integer.MIN_VALUE) {
							int cost = (i - j) + q2;
							maxCost[i][j] = max(maxCost[i][j], cost);
						}
					}
				}

				for(int i = r - 1; i >= 0; --i) {
					for(int j = c - 1; j >= 0; --j) {
						if(vis[i][j] == 0) {
							updateSegTree(segTree[2], 0, c - 1, 0, j, -(j - i));
							updateSegTree(segTree[3], 0, c - 1, 0, j, -(-i - j));
						}
						int q1 = querySegTree(segTree[2], 0, c - 1, 0, 0, j);
						if(q1 != Integer.MIN_VALUE) {
							int cost = (j - i) + q1;
							maxCost[i][j] = max(maxCost[i][j], cost);
						}
						int q2 = querySegTree(segTree[3], 0, c - 1, 0, j, c - 1);
						if(q2 != Integer.MIN_VALUE) {
							int cost = (-i - j) + q2;
							maxCost[i][j] = max(maxCost[i][j], cost);
						}
					}
				}

				int flag = 0;
				for(int i = 0; i < r; ++i) {
					for(int j = 0; j < c; ++j) {
						if(maxCost[i][j] <= mid)
							flag = 1;
					}
				}

				if(flag == 0) 
					start = mid + 1;
				else {
					end = mid - 1;
					ans = mid;
				}
			}
 
			w.println("Case #" + x + ": " + ans);
		}

		w.close();
	}
}