import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.Math.max;
import static java.lang.System.arraycopy;
import static java.lang.System.exit;
import static java.util.Arrays.copyOf;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;

public class Solution {

	// Discuss this round on Codeforces: https://codeforces.com/blog/entry/66623

	static class IntList {

		int data[] = new int[3];
		int size = 0;

		boolean isEmpty() {
			return size == 0;
		}

		int size() {
			return size;
		}

		int get(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException();
			}
			return data[index];
		}

		void clear() {
			size = 0;
		}

		void set(int index, int value) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException();
			}
			data[index] = value;
		}

		void expand() {
			if (size >= data.length) {
				data = copyOf(data, (data.length << 1) + 1);
			}
		}

		void insert(int index, int value) {
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException();
			}
			expand();
			arraycopy(data, index, data, index + 1, size++ - index);
			data[index] = value;
		}

		int delete(int index) {
			if (index < 0 || index >= size) {
				throw new IndexOutOfBoundsException();
			}
			int value = data[index];
			arraycopy(data, index + 1, data, index, --size - index);
			return value;
		}

		void push(int value) {
			expand();
			data[size++] = value;
		}

		int pop() {
			if (size == 0) {
				throw new NoSuchElementException();
			}
			return data[--size];
		}

		void unshift(int value) {
			expand();
			arraycopy(data, 0, data, 1, size++);
			data[0] = value;
		}

		int shift() {
			if (size == 0) {
				throw new NoSuchElementException();
			}
			int value = data[0];
			arraycopy(data, 1, data, 0, --size);
			return value;
		}
	}

	static int treeN, treeAdd[], treeMax[];

	static void treePush(int x) {
		int v = treeAdd[x - 1];
		if (v != 0) {
			treeAdd[(x << 1) - 1] += v;
			treeAdd[x << 1] += v;
			treeMax[x - 1] += v;
			treeAdd[x - 1] = 0;
		}
	}

	static void treeFix(int x) {
		treeMax[x - 1] = max(
			x << 1 < treeN ? treeMax[(x << 1) - 1] + treeAdd[(x << 1) - 1] : treeAdd[(x << 1) - 1],
			(x << 1) + 1 < treeN ? treeMax[x << 1] + treeAdd[x << 1] : treeAdd[x << 1]);
	}

	static void treeAdd(int from, int to, int v) {
		if (from == to) {
			return;
		}
		from += treeN;
		to += treeN;
		for (int i = 31 - Integer.numberOfLeadingZeros(from); i > 0; i--) {
			treePush(from >> i);
		}
		for (int x = from, y = 0;; ) {
			if ((x & (1 << y)) == 0 && x + (1 << (y + 1)) <= to) {
				++y;
			} else if (x + (1 << y) > to) {
				--y;
			} else {
				treeAdd[(x >> y) - 1] += v;
				x += 1 << y;
				if (x == to) {
					break;
				}
				int l = Integer.numberOfTrailingZeros(x);
				for (int i = 1; i <= l; i++) {
					if ((x >> i) != 1) {
						treeFix((x >> i) - 1);
					}
				}
				for (int i = l; i > 0; i--) {
					treePush(x >> i);
				}
			}
		}
		int l = 31 - Integer.numberOfLeadingZeros(to - 1);
		for (int i = 1; i <= l; i++) {
			treeFix((to - 1) >> i);
		}
	}

	static int treeMax(int from, int to) {
		if (from == to) {
			return 0;
		}
		from += treeN;
		to += treeN;
		int res = 0;
		for (int i = 31 - Integer.numberOfLeadingZeros(from); i > 0; i--) {
			treePush(from >> i);
		}
		for (int x = from, y = 0;; ) {
			if ((x & (1 << y)) == 0 && x + (1 << (y + 1)) <= to) {
				++y;
			} else if (x + (1 << y) > to) {
				--y;
			} else {
				res = max(res, (y == 0 ? treeAdd : treeMax)[(x >> y) - 1]);
				x += 1 << y;
				if (x == to) {
					break;
				}
				for (int i = Integer.numberOfTrailingZeros(x); i > 0; i--) {
					treePush(x >> i);
				}
			}
		}
		return res;
	}

	static void solve() throws Exception {
		int n = scanInt();
		int s = scanInt();
		int a[] = new int[n];
		int maxA = -1;
		for (int i = 0; i < n; i++) {
			maxA = max(maxA, a[i] = scanInt() - 1);
		}
		IntList poss[] = new IntList[maxA + 1];
		for (int i = 0; i < n; i++) {
			int ca = a[i];
			if (poss[ca] == null) {
				poss[ca] = new IntList();
			}
			poss[ca].push(i);
		}
		int pNext[] = new int[n], pS[] = new int[n];
		treeN = n;
		treeAdd = new int[2 * n - 1];
		treeMax = new int[n - 1];
		for (IntList pos: poss) {
			if (pos == null) {
				continue;
			}
			for (int i = 0; i < pos.size; i++) {
				pNext[pos.data[i]] = i + 1 < pos.size ? pos.data[i + 1] : n;
				pS[pos.data[i]] = i + s < pos.size ? pos.data[i + s] : n;
				if (i < s) {
					treeAdd(pos.data[i], s < pos.size ? pos.data[s] : n, 1);
				}
			}
		}
		int ans = 0;
		for (int i = 0; i < n; i++) {
			ans = max(ans, treeMax(0, n));
			treeAdd(i, pS[i], -1);
			if (pS[i] != n) {
				treeAdd(pS[i], pNext[pS[i]], s);
			}
		}
		printCase();
		out.println(ans);
	}

	static int scanInt() throws IOException {
		return parseInt(scanString());
	}

	static long scanLong() throws IOException {
		return parseLong(scanString());
	}

	static String scanString() throws IOException {
		while (tok == null || !tok.hasMoreTokens()) {
			tok = new StringTokenizer(in.readLine());
		}
		return tok.nextToken();
	}

	static void printCase() {
		out.print("Case #" + test + ": ");
	}

	static void printlnCase() {
		out.println("Case #" + test + ":");
	}

	static BufferedReader in;
	static PrintWriter out;
	static StringTokenizer tok;
	static int test;

	public static void main(String[] args) {
		try {
			in = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);
			int tests = scanInt();
			for (test = 1; test <= tests; test++) {
				solve();
			}
			in.close();
			out.close();
		} catch (Throwable e) {
			e.printStackTrace();
			exit(1);
		}
	}
}